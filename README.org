#+TITLE: crockery
#+PROPERTY: header-args:clojure  :exports both :results output :wrap example
#+OPTIONS: toc:nil

* Crockery

Print clojure maps as a human-readable table.

#+CAPTION: Clojars project
[[https://clojars.org/com.joshuadavey/crockery][https://img.shields.io/clojars/v/com.joshuadavey/crockery.svg]]

#+TOC: headlines 1 local
  
** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:

Add the latest version of library to your app.

For leiningen or boot:
#+begin_src clojure :exports code :eval never
[com.joshuadavey/crockery "<version>"]}
#+end_src

or, for deps.edn:
#+begin_src clojure :exports code :eval never
{com.joshuadavey/crockery {:mvn/version "<latest version>"}}
#+end_src

Require =crockery.core=, which contains the primary API:

#+begin_src clojure :exports code :results value
(require '[crockery.core :as crockery])
#+end_src

The examples that follow use this data:

#+begin_src clojure :exports code :results value
(def people
  [{:first-name "Alice", :last-name "Anderson", :age 32}
   {:first-name "Bob", :last-name "Bobberson", :age 29},
   {:first-name "Carol", :last-name "Carola", :age 26},
   {:first-name "Doug", :last-name "Duggler", :age 41}])
#+end_src

#+RESULTS:
: #'user/people

Print a table, inferring column names from the first map of the collection:

#+begin_src clojure
(crockery/print-table people)
#+end_src

#+RESULTS:
#+begin_example
|------------+-----------+-----|
| First Name | Last Name | Age |
|------------+-----------+-----|
| Alice      | Anderson  | 32  |
| Bob        | Bobberson | 29  |
| Carol      | Carola    | 26  |
| Doug       | Duggler   | 41  |
|------------+-----------+-----|
#+end_example

Or, specify the columns you want included:

#+begin_src clojure
(crockery/print-table [:age :last-name] people)
#+end_src

#+RESULTS:
#+begin_example
|-----+-----------|
| Age | Last Name |
|-----+-----------|
| 32  | Anderson  |
| 29  | Bobberson |
| 26  | Carola    |
| 41  | Duggler   |
|-----+-----------|
#+end_example

You can mix and match colspec forms (maps and keywords):

#+begin_src clojure
(crockery/print-table [{:name :last-name, :align :right} :first-name] people)
#+end_src

#+RESULTS:
#+begin_example
|-----------+------------|
| Last Name | First Name |
|-----------+------------|
|  Anderson | Alice      |
| Bobberson | Bob        |
|    Carola | Carol      |
|   Duggler | Doug       |
|-----------+------------|
#+end_example

** Colspec options
:PROPERTIES:
:CUSTOM_ID: column-options
:END:

In map form, most keys are optional, but a colspec must have at least
=:name= or =:key-fn= and =:title=.

*** :name

Use a keyword for both the getter function and the title of the column (titleized):

#+begin_src clojure
(crockery/print-table [{:name :age} {:name :last-name}] people)
#+end_src

#+RESULTS:
#+begin_example
|-----+-----------|
| Age | Last Name |
|-----+-----------|
| 32  | Anderson  |
| 29  | Bobberson |
| 26  | Carola    |
| 41  | Duggler   |
|-----+-----------|
#+end_example

*** :key-fn

Specify a different accessor function. It should be a function that
takes one arg, and will be called for each "row" in the collection.

#+begin_src clojure
(crockery/print-table
 [{:title "Age (months)" :key-fn (comp (partial * 12) :age)}
  :first-name]
 people)
#+end_src

#+RESULTS:
#+begin_example
|--------------+------------|
| Age (months) | First Name |
|--------------+------------|
| 384          | Alice      |
| 348          | Bob        |
| 312          | Carol      |
| 492          | Doug       |
|--------------+------------|
#+end_example

*** :width

Widths are normally calculated by finding the longest string per column, but you can also specify one:

#+begin_src clojure
(crockery/print-table [{:name :age, :width 10} {:name :last-name, :width 5}] people)
#+end_src

#+RESULTS:
#+begin_example
|------------+-------|
| Age        | Last  |
|------------+-------|
| 32         | Ander |
| 29         | Bobbe |
| 26         | Carol |
| 41         | Duggl |
|------------+-------|
#+end_example

Values that are too long will be truncated.

*** :align

One of =#{:left :center :right}=, defaults to =:left=. Affects the
data rows. When no =:title-align= is specified, also affects the
header.

*** :title

Provide your own header title rather than titleizing the =:name= parameter.

#+begin_src clojure
(crockery/print-table [:last-name {:name :first-name, :title "Given name"}] people)
#+end_src

#+RESULTS:
#+begin_example
|-----------+------------|
| Last Name | Given name |
|-----------+------------|
| Anderson  | Alice      |
| Bobberson | Bob        |
| Carola    | Carol      |
| Duggler   | Doug       |
|-----------+------------|
#+end_example


*** :title-align

Same properties as =:align=, but only affects the header.

** Formats
:PROPERTIES:
:CUSTOM_ID: formats
:END:

The default output format is an =:org=, which outputs an org-mode
compatible table. There are other built-in formats that can be used.
You can specify the format with the =:format= key in the options map,
either before other arguments, or globally by rebinding the
=crockery.core/*default-options*= var.

*** :org

This is the default format. See any of the above examples.

*** :fancy

This format uses unicode pipe characters.

#+begin_src clojure
(crockery/print-table {:format :fancy}
                      [:last-name {:name :first-name, :title "Given name"}]
                      people)
#+end_src

#+RESULTS:
#+begin_example
┌───────────┬────────────┐
│ Last Name │ Given name │
├───────────┼────────────┤
│ Anderson  │ Alice      │
│ Bobberson │ Bob        │
│ Carola    │ Carol      │
│ Duggler   │ Doug       │
└───────────┴────────────┘
#+end_example

*** :tsv

This tab-delimited format doesn't look great when printed directly,
but is convenient for further processing with common unix utils.

#+begin_src clojure
(crockery/print-table {:format :tsv}
                      [:last-name {:name :first-name, :title "Given name"}]
                      people)
#+end_src

#+RESULTS:
#+begin_example
Last Name	Given name
Anderson	Alice
Bobberson	Bob
Carola	Carol
Duggler	Doug
#+end_example

*** :gfm

Github-flavored Markdown (GFM) extends standard Markdown with a table
syntax, including alignment designators.

#+begin_src clojure
(crockery/print-table {:format :gfm}
                      [{:name :last-name, :align :right}
                       {:name :first-name, :title "Given name"}]
                      people)
#+end_src

#+RESULTS:
#+begin_example
| Last Name | Given name |
|----------:|:-----------|
|  Anderson | Alice      |
| Bobberson | Bob        |
|    Carola | Carol      |
|   Duggler | Doug       |
#+end_example


** License
:PROPERTIES:
:CUSTOM_ID: license
:END:

Copyright © 2021 Joshua Davey

Distributed under the Eclipse Public License version 1.0.
